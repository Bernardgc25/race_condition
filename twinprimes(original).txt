#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>


//global variables
pthread_t thd[2];
pthread_mutex_t myLock;
int primecount = 0;
int twinprimelimit = 0;
int Pstep = 20;
int counter = 0;

//function prototype
int check_prime(int n)
{
    if(n == 1)
    {
    return 0;
    }

    for(int i = 2; i < n; i++)
    {
        if(n % i == 0)
        {
        // number is not prime
        return 0;
        }
    }

// number is prime
return 1;
}


void twinprimes()
{



	int idx;
	int currIdx;

	   //update counter at every 10000
	   psteploop:

	   idx = counter;
	   counter += Pstep;
	   currIdx = counter;



	   //twinprimeloop
	   while (idx <= twinprimelimit )
	   {

		   if(check_prime(idx) && check_prime(idx + 2))
		   {
			    //printf("{%d, %d}\n", i, i + 2);
			    primecount++;
		   }

		   else
		   {
			   if (idx == currIdx)
			   {
			   //counter = idx;
			   goto psteploop;
			   }
		   }
		idx++;
	   }






}



int main(int argc, char *argv[])
{





    if(argc > 3)
    {
    printf("Error, invalid command line arguments.");
    }
    //argc == 1
    else if (argc < 2)
    {
    printf("Usage: /twinPrimes <-s|-p> <limitValue>");

    }
    //argc == 3
    else
    {
        if(argv[2] == NULL)
        {
        printf("Error, invalid command line arguments.");
        }
        else
        {

        char *threadmode = argv[1];
        twinprimelimit = atoi(argv[2]);

            //sequential
            if(strcmp(threadmode, "-s") == 0 )
            {
                if(twinprimelimit < 10)
                {
                printf("Error, limit must be > 10.");
                }

                else
                {
               //create a thread
               //////////////////////////////////////////////////////////////////

    			//////////////////////////////////////////////////////////////////

                twinprimes();
                printf("Count of Twin Primes between 1 and %d",twinprimelimit);
                printf("\n");
                printf("is %d",primecount-1);
                }
            }


            //parallel
            else if(strcmp(threadmode, "-p") == 0 )
            {
                if(twinprimelimit < 100)
                {
                printf("Error, limit must be > 100.");
                }


                else
                {
                //create 2 threads
                //////////////////////////////////////////////////////////////////

               //////////////////////////////////////////////////////////////////


    		   //printf("parallel.");
                printf("Count of Twin Primes between 1 and %d",twinprimelimit);
                printf("\n");
                printf("is %d",primecount-1);

                }
            }
            //invalid argv[1]
            else
            {
            printf("Error, invalid command line arguments.");
            }

        }



    }





printf("\n");
return 0;

}
